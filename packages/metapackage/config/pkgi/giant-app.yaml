#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")
#@ load("@ytt:struct", "struct")

#@  if data.values.profile != "small":

#@ def collect_values(data_values):
#@  deploymentType = "knative"
#@  namespace = "giant-app"
#@  name = "giant-app"
#@  if data.values.profile != "full":
#@    deploymentType = "core"
#@  end
#@  if hasattr(data.values, "namespace") and hasattr(data.values.namespace, "name") and data.values.namespace.name != "":
#@    namespace = data.values.namespace.name
#@  end
#@  if hasattr(data.values, "giantApp") and hasattr(data.values.giantApp, "name") and data.values.giantApp.name != "":
#@    name = data.values.giantApp.name
#@  end
#@  if hasattr(data.values, "giantApp") and hasattr(data.values.giantApp, "deploymentType") and data.values.giantApp.deploymentType != "":
#@    deploymentType = data.values.giantApp.deploymentType
#@  end
#@  values = {
#@    "giantApp": {
#@      "deploymentType": deploymentType,
#@      "name": data.values.giantApp.name
#@    },
#@    "namespace": {
#@      "name": namespace
#@    }
#@  }

#@  return struct.encode(values)
#@ end
---
apiVersion: packaging.carvel.dev/v1alpha1
kind: PackageInstall
metadata:
  name: giant-app
  namespace: metapackage-install
  annotations:
    kapp.k14s.io/change-rule: "upsert after upserting rbac"
spec:
  serviceAccountName: #@ data.values.installConfig.serviceAccount
  packageRef:
    refName: giant-app.corp.com
    versionSelection:
      constraints: 3.5.1
  values:
    - secretRef:
        name: giant-app-values
---
apiVersion: v1
kind: Secret
metadata:
  name: giant-app-values
  namespace: metapackage-install
stringData:
  values.yml: #@ yaml.encode(collect_values(data.values))
#@ end